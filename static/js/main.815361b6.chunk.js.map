{"version":3,"sources":["Components/Spinner.js","Components/Api.js","Components/DropdownCategories.js","Components/Search.js","Components/Header.js","Components/RenderMovie.js","Components/MovieGrid.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Spinners","props","isLoading","Spinner","animation","variant","size","constructUrl","path","query","queryText","DropdownCategories","SEARCH_URL_CATEGORIES","useState","categories","setCategories","useEffect","fetch","then","res","json","data","console","log","undefined","genres","id","name","catch","err","Dropdown","style","marginRight","Toggle","category","Menu","length","map","Item","href","key","onSelect","setCategory","Search","setQuery","SEARCH_URL","results","movies","filter","movie","genre_ids","includes","handleMovies","Form","inline","onSubmit","event","preventDefault","setIsLoading","handleQuery","FormControl","type","placeholder","className","onChange","e","target","value","Button","Header","Navbar","bg","expand","Brand","color","aria-controls","Collapse","Nav","Link","RenderMovie","show","setShow","handleClose","marginTop","marginBottom","title","src","alt","width","height","borderRadius","onClick","Modal","onHide","closeButton","Title","Body","overview","Footer","MoviesGrid","gutter","span","align","backdrop_path","Main","icon","faGithub","App","setMovies","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.815361b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nexport default function Spinners(props) {\r\n  return (\r\n    <>\r\n      {props.isLoading && (\r\n        <Spinner animation=\"border\" variant=\"warning\" size=\"sm\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","const TMDB_BASE_URL = `https://api.themoviedb.org/3`;\r\nconst API_KEY = \"542003918769df50083a13c415bbc602\";\r\n\r\nexport function constructUrl(path, query) {\r\n  const queryText = query ? `&query=${query}` : \"\";\r\n  return `${TMDB_BASE_URL}/${path}?api_key=${API_KEY}` + queryText;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { constructUrl } from \"./Api\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"react-bootstrap\";\r\n\r\nexport default function DropdownCategories(props) {\r\n  const SEARCH_URL_CATEGORIES = constructUrl(\"genre/movie/list\", \"\");\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  useEffect(() => {\r\n    fetch(SEARCH_URL_CATEGORIES)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.genres !== undefined)\r\n          setCategories([{ id: 0, name: \"All\" }, ...data.genres]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [SEARCH_URL_CATEGORIES]);\r\n\r\n  return (\r\n    <>\r\n      <Dropdown style={{ marginRight: \"5px\" }}>\r\n        <Dropdown.Toggle variant=\"warning\" id=\"dropdown-basic\">\r\n          {props.category.name || \"Categories\"}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          {categories.length > 0 &&\r\n            categories.map((category) => (\r\n              <Dropdown.Item\r\n                href=\"#\"\r\n                key={category.id}\r\n                onSelect={() => props.setCategory(category)}\r\n              >\r\n                {category.name}\r\n              </Dropdown.Item>\r\n            ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, FormControl } from \"react-bootstrap\";\r\nimport Spinners from \"./Spinner\";\r\nimport DropdownCategories from \"./DropdownCategories\";\r\nimport { constructUrl } from \"./Api\";\r\n\r\nexport default function Search(props) {\r\n  const [category, setCategory] = useState({});\r\n\r\n  const changeCategory = (category) => {\r\n    console.log(category);\r\n    props.setIsLoading(true);\r\n    setCategory(category);\r\n  };\r\n  const [query, setQuery] = useState(\"\");\r\n  const onChange = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.setIsLoading(true);\r\n    props.handleQuery(query);\r\n  };\r\n\r\n  useEffect(fetchMovies, [props.isLoading, category]);\r\n  function fetchMovies() {\r\n    if (!props.isLoading) return;\r\n    let SEARCH_URL;\r\n    if (query !== \"\") {\r\n      SEARCH_URL = constructUrl(\"search/movie\", query);\r\n    } else {\r\n      SEARCH_URL = constructUrl(\"movie/popular\");\r\n    }\r\n    fetch(SEARCH_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.results !== undefined) {\r\n          let movies = data.results;\r\n          console.log(movies);\r\n          if (category.id) {\r\n            movies = movies.filter((movie) =>\r\n              movie.genre_ids.includes(category.id)\r\n            );\r\n            console.log(movies);\r\n          }\r\n          props.handleMovies(movies);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <Form inline onSubmit={onSubmit}>\r\n      <DropdownCategories category={category} setCategory={changeCategory} />\r\n      <FormControl\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        className=\"mr-sm-2\"\r\n        onChange={onChange}\r\n      />\r\n      <Button variant=\"outline-light\" type=\"submit\">\r\n        Search\r\n        <span>\r\n          <Spinners isLoading={props.isLoading} />\r\n        </span>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport Search from \"./Search\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\" style={{ color: \"white\" }}>\r\n          React App\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-Navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-Navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\" style={{ color: \"white\" }}>\r\n              Home\r\n            </Nav.Link>\r\n          </Nav>\r\n          <Search\r\n            handleQuery={props.handleQuery}\r\n            handleMovies={props.handleMovies}\r\n            isLoading={props.isLoading}\r\n            setIsLoading={props.setIsLoading}\r\n          />\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default function RenderMovie(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div style={{ marginTop: \"50px\", marginBottom: \"50px\" }}>\r\n      <p>{props.title}</p>\r\n      <img\r\n        src={props.src}\r\n        alt=\"movie image\"\r\n        width=\"380\"\r\n        height=\"300\"\r\n        style={{ borderRadius: \"3px\" }}\r\n      />\r\n\r\n      <Button\r\n        variant=\"warning\"\r\n        onClick={handleShow}\r\n        style={{ marginTop: \"10px\" }}\r\n      >\r\n        The Overview\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>OverView</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>{props.overview}</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"warning\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RenderMovie from \"./RenderMovie\";\r\nimport { Row, Col } from \"react-simple-flex-grid\";\r\n\r\nexport default function MoviesGrid(props) {\r\n  const movies = props.movies;\r\n  return (\r\n    <>\r\n      <Row gutter={40}>\r\n        {movies.length > 0 &&\r\n          movies.map((movie) => (\r\n            <Col span={3} align=\"middle\">\r\n              <RenderMovie\r\n                overview={movie.overview}\r\n                src={\r\n                  \"https://image.tmdb.org/t/p/original\" + movie.backdrop_path\r\n                }\r\n                key={movie.id}\r\n                title={movie.title}\r\n              />\r\n            </Col>\r\n          ))}\r\n      </Row>\r\n      {/* <RenderMovie movies={props.movies} /> */}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import RenderMovie from \"./RenderMovie\";\r\nimport MovieGrid from \"./MovieGrid\";\r\n\r\nexport default function Main(props) {\r\n  // const query = props.query;\r\n  const movies = props.movies;\r\n\r\n  return <>{movies.length > 0 && <MovieGrid movies={movies} />}</>;\r\n}\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"main-footer\">\r\n      <small style={{ marginRight: \"20px\" }}>\r\n        Developed with ❤ by bawan-shna-abdulrahman\r\n      </small>\r\n      <a href=\"https://github.com/shna-rafeeq\" style={{ color: \"white\" }}>\r\n        <FontAwesomeIcon icon={faGithub} />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Header from \"./Components/Header\";\nimport Main from \"./Components/Main\";\nimport Footer from \"./Components/Footer\";\nimport \"react-simple-flex-grid/lib/main.css\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const handleQuery = (query) => {\n    setQuery(query);\n  };\n\n  const handleMovies = (movies) => {\n    setMovies(movies);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-wrap\">\n        <Header\n          handleQuery={handleQuery}\n          handleMovies={handleMovies}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n        />\n        <Main\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n          movies={movies}\n          query={query}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}