{"version":3,"sources":["Components/Spinner.js","Components/Api.js","Components/DropdownCategories.js","Components/Search.js","Components/Header.js","Components/RenderMovie.js","Components/MovieGrid.js","Components/Main.js","Components/Footer.js","Components/MoviePage.js","App.js","serviceWorker.js","index.js"],"names":["Spinners","props","isLoading","Spinner","animation","variant","size","constructUrl","path","query","queryText","DropdownCategories","SEARCH_URL_CATEGORIES","useState","categories","setCategories","useEffect","fetch","then","res","json","data","undefined","genres","id","name","catch","err","console","log","Dropdown","style","marginRight","Toggle","category","Menu","length","map","Item","href","key","onSelect","setCategory","Search","setQuery","SEARCH_URL","results","movies","filter","movie","genre_ids","includes","handleMovies","Form","inline","onSubmit","event","preventDefault","setIsLoading","handleQuery","FormControl","type","placeholder","className","onChange","e","target","value","Button","Header","Navbar","bg","expand","to","color","textDecoration","aria-controls","Collapse","Nav","RenderMovie","title","marginTop","Card","width","margin","Img","src","moviebackdrop","Body","Title","align","substr","Badge","popularity","release_date","MoviesGrid","Container","Row","overview","backdrop_path","Main","setMovieId","Footer","icon","faGithub","MoviePage","MOVIE_ID","match","params","movieItem","setMovieItem","trailers","setTrailers","actors","setActors","history","push","tmp","trailer","cast","actor","original_title","vote_average","v","i","marginLeft","url","genre","padding","backgroundColor","borderRadius","borderColor","App","setMovies","movieId","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f5585ae9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nexport default function Spinners(props) {\r\n  return (\r\n    <>\r\n      {props.isLoading && (\r\n        <Spinner animation=\"border\" variant=\"warning\" size=\"sm\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","const TMDB_BASE_URL = `https://api.themoviedb.org/3`;\r\nconst API_KEY = \"542003918769df50083a13c415bbc602\";\r\n\r\nexport function constructUrl(path, query) {\r\n  const queryText = query ? `&query=${query}` : \"\";\r\n  return `${TMDB_BASE_URL}/${path}?api_key=${API_KEY}` + queryText;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { constructUrl } from \"./Api\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"react-bootstrap\";\r\n\r\nexport default function DropdownCategories(props) {\r\n  const SEARCH_URL_CATEGORIES = constructUrl(\"genre/movie/list\", \"\");\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  useEffect(() => {\r\n    fetch(SEARCH_URL_CATEGORIES)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.genres !== undefined)\r\n          setCategories([{ id: 0, name: \"All\" }, ...data.genres]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [SEARCH_URL_CATEGORIES]);\r\n\r\n  return (\r\n    <>\r\n      <Dropdown style={{ marginRight: \"5px\" }}>\r\n        <Dropdown.Toggle variant=\"warning\" id=\"dropdown-basic\">\r\n          {props.category.name || \"Categories\"}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          {categories.length > 0 &&\r\n            categories.map((category) => (\r\n              <Dropdown.Item\r\n                href=\"#\"\r\n                key={category.id}\r\n                onSelect={() => props.setCategory(category)}\r\n              >\r\n                {category.name}\r\n              </Dropdown.Item>\r\n            ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, FormControl } from \"react-bootstrap\";\r\nimport Spinners from \"./Spinner\";\r\nimport DropdownCategories from \"./DropdownCategories\";\r\nimport { constructUrl } from \"./Api\";\r\n\r\nexport default function Search(props) {\r\n  const [category, setCategory] = useState({});\r\n\r\n  const changeCategory = (category) => {\r\n    console.log(category);\r\n    props.setIsLoading(true);\r\n    setCategory(category);\r\n  };\r\n  const [query, setQuery] = useState(\"\");\r\n  const onChange = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.setIsLoading(true);\r\n    props.handleQuery(query);\r\n  };\r\n\r\n  useEffect(fetchMovies, [props.isLoading, category]);\r\n  function fetchMovies() {\r\n    if (!props.isLoading) return;\r\n    let SEARCH_URL;\r\n    if (query !== \"\") {\r\n      SEARCH_URL = constructUrl(\"search/movie\", query);\r\n    } else {\r\n      SEARCH_URL = constructUrl(\"movie/popular\");\r\n    }\r\n    fetch(SEARCH_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.results !== undefined) {\r\n          let movies = data.results;\r\n\r\n          if (category.id) {\r\n            movies = movies.filter((movie) => {\r\n              movie.genre_ids.includes(category.id);\r\n            });\r\n          }\r\n\r\n          props.handleMovies(movies);\r\n        }\r\n      })\r\n\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <Form inline onSubmit={onSubmit}>\r\n      <DropdownCategories category={category} setCategory={changeCategory} />\r\n      <FormControl\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        className=\"mr-sm-2\"\r\n        onChange={onChange}\r\n      />\r\n      <Button variant=\"outline-light\" type=\"submit\">\r\n        Search\r\n        <span>\r\n          <Spinners isLoading={props.isLoading} />\r\n        </span>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport Search from \"./Search\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" expand=\"lg\">\r\n        <Link\r\n          to=\"/\"\r\n          style={{\r\n            marginRight: \"20px\",\r\n            color: \"white\",\r\n            textDecoration: \"none\",\r\n          }}\r\n        >\r\n          React app\r\n        </Link>\r\n        <Navbar.Toggle aria-controls=\"basic-Navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-Navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link to=\"/\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n              Home\r\n            </Link>\r\n          </Nav>\r\n          <Search\r\n            handleQuery={props.handleQuery}\r\n            handleMovies={props.handleMovies}\r\n            isLoading={props.isLoading}\r\n            setIsLoading={props.setIsLoading}\r\n          />\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\nimport \"./BoxShadow.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function RenderMovie(props) {\r\n  const nullPhoto =\r\n    \"https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png\";\r\n  return (\r\n    <Link\r\n      to={`/movie/${props.title}/${props.id}`}\r\n      style={{ textDecoration: \"none\", color: \"black\" }}\r\n    >\r\n      <div style={{ marginTop: \"50px\" }}>\r\n        <Card\r\n          className=\"shadow-box\"\r\n          style={{\r\n            width: \"300px\",\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          <Card.Img\r\n            variant=\"top\"\r\n            src={props.moviebackdrop !== null ? props.src : nullPhoto}\r\n          />\r\n          <Card.Body>\r\n            <Card.Title title={props.title} align=\"middle\">\r\n              {`${props.title}`.substr(0, 20)}\r\n              {props.title.length >= 25 ? \"...\" : \"\"}\r\n            </Card.Title>\r\n            <Badge variant=\"warning\" style={{ marginRight: \"65px\" }}>\r\n              Popularity:{props.popularity}\r\n            </Badge>\r\n            <Badge variant=\"primary\">{props.release_date}</Badge>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RenderMovie from \"./RenderMovie\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nexport default function MoviesGrid(props) {\r\n  const movies = props.movies;\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        {movies.length > 0 &&\r\n          movies.map((movie) => (\r\n            <RenderMovie\r\n              overview={movie.overview}\r\n              src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\r\n              moviebackdrop={movie.backdrop_path}\r\n              id={movie.id}\r\n              key={movie.id}\r\n              title={movie.title}\r\n              popularity={movie.popularity}\r\n              release_date={movie.release_date}\r\n            />\r\n          ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport MovieGrid from \"./MovieGrid\";\r\n\r\nexport default function Main(props) {\r\n  const movies = props.movies;\r\n\r\n  return (\r\n    <>\r\n      {movies.length > 0 && (\r\n        <MovieGrid movies={movies} setMovieId={props.setMovieId} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"main-footer\">\r\n      <small style={{ marginRight: \"20px\" }}>\r\n        Developed with ❤ by bawan-shna-abdulrahman\r\n      </small>\r\n      <a href=\"https://github.com/shna-rafeeq\" style={{ color: \"white\" }}>\r\n        <FontAwesomeIcon icon={faGithub} />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { constructUrl } from \"./Api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nexport default function MoviePage(props) {\r\n  const nullPhoto =\r\n    \"https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png\";\r\n\r\n  let SEARCH_URL;\r\n  let MOVIE_ID = props.match.params.id;\r\n  const [movieItem, setMovieItem] = useState({});\r\n  const [trailers, setTrailers] = useState([]);\r\n  const [actors, setActors] = useState([]);\r\n\r\n  // fetch each card\r\n  useEffect(() => {\r\n    SEARCH_URL = constructUrl(`movie/${MOVIE_ID}`);\r\n    fetch(SEARCH_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.id == undefined) {\r\n          props.history.push(\"/\");\r\n        } else {\r\n          setMovieItem(data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        props.history.push(\"/\");\r\n      });\r\n  }, [MOVIE_ID]);\r\n  //fetch trailers\r\n  useEffect(() => {\r\n    SEARCH_URL = constructUrl(`movie/${MOVIE_ID}/videos`);\r\n    fetch(SEARCH_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const tmp = [];\r\n        data.results.map((trailer) => {\r\n          tmp.push(`https://www.youtube.com/watch?v=${trailer.key}`);\r\n        });\r\n        setTrailers(tmp);\r\n      });\r\n  }, [MOVIE_ID]);\r\n\r\n  //fetch actors\r\n  useEffect(() => {\r\n    SEARCH_URL = constructUrl(`movie/${MOVIE_ID}/credits`);\r\n    fetch(SEARCH_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let actors = [];\r\n        data.cast.map((actor) => {\r\n          actors.push(actor.name);\r\n        });\r\n        setActors(actors);\r\n      });\r\n  }, [MOVIE_ID]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          marginTop: \"50px\",\r\n        }}\r\n      >\r\n        <Card\r\n          className=\"shadow-box\"\r\n          style={{\r\n            width: \"300px\",\r\n            margin: \"20px\",\r\n          }}\r\n        >\r\n          <Card.Img\r\n            variant=\"top\"\r\n            src={\r\n              movieItem.backdrop_path !== null\r\n                ? \"https://image.tmdb.org/t/p/original\" +\r\n                  movieItem.backdrop_path\r\n                : nullPhoto\r\n            }\r\n          />\r\n          <Card.Body>\r\n            <Card.Title align=\"middle\">{movieItem.original_title}</Card.Title>\r\n            <Badge variant=\"warning\" style={{ marginRight: \"95px\" }}>\r\n              Rating: {movieItem.vote_average}\r\n            </Badge>\r\n            <Badge variant=\"primary\">{movieItem.release_date}</Badge>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n      {trailers.map((v, i) => {\r\n        return (\r\n          <ReactPlayer\r\n            style={{ marginTop: \"10px\", marginLeft: \"10px\" }}\r\n            key={`haha-${i}`}\r\n            url={v}\r\n          />\r\n        );\r\n      })}\r\n      {actors.map((v) => {\r\n        return <p style={{ marginLeft: \"10px\" }}>{v}</p>;\r\n      })}\r\n\r\n      {movieItem.genres\r\n        ? movieItem.genres.map((genre) => {\r\n            return (\r\n              <Badge\r\n                style={{ marginRight: \"20px\", marginLeft: \"10px\" }}\r\n                variant=\"warning\"\r\n              >\r\n                {genre.name}\r\n              </Badge>\r\n            );\r\n          })\r\n        : null}\r\n\r\n      <Link\r\n        to=\"/\"\r\n        style={{\r\n          marginLeft: \"50%\",\r\n          textDecoration: \"none\",\r\n          color: \"black\",\r\n          padding: \"5px\",\r\n          backgroundColor: \" #ffc107\",\r\n          borderRadius: \"0.25rem\",\r\n          borderColor: \"#ffc107\",\r\n        }}\r\n      >\r\n        Back\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Header from \"./Components/Header\";\r\nimport Main from \"./Components/Main\";\r\nimport Footer from \"./Components/Footer\";\r\nimport MoviePage from \"./Components/MoviePage\";\r\nimport \"react-simple-flex-grid/lib/main.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nexport default function App() {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n  const [movieId, setMovieId] = useState(\"\");\r\n\r\n  const handleQuery = (query) => {\r\n    setQuery(query);\r\n  };\r\n\r\n  const handleMovies = (movies) => {\r\n    setMovies(movies);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"page-container\">\r\n        <div className=\"content-wrap\">\r\n          <Header\r\n            handleQuery={handleQuery}\r\n            handleMovies={handleMovies}\r\n            isLoading={isLoading}\r\n            setIsLoading={setIsLoading}\r\n          />\r\n          <Route path=\"/iraq-bc-movies-project-students\">\r\n            <Redirect to=\"/\" />\r\n          </Route>\r\n          <Route path=\"/movie/:title/:id\" component={MoviePage} />\r\n          <Route path=\"/\">\r\n            <Main\r\n              isLoading={isLoading}\r\n              setIsLoading={setIsLoading}\r\n              movies={movies}\r\n              query={query}\r\n              setMovieId={setMovieId}\r\n              movieId={movieId}\r\n            />\r\n          </Route>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}